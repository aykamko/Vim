""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" {{{ vim-plug
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('vim_starting')
  set encoding=utf-8 " necessary to show Unicode glyphs
endif
set nocompatible   " be iMproved
let s:darwin = has('mac')
let s:tmux = $TMUX != ''

augroup vimrc_folding
  autocmd!
  autocmd BufNewFile,BufReadPost .vimrc
        \  set foldmethod=marker
        \| set foldlevel=0
        \| autocmd! vimrc_folding
augroup END

" autoinstall vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

let g:plug_dir = '~/.vim/bundle/'
function! s:plug_exists(plug)
  return isdirectory(expand(g:plug_dir.a:plug))
endfunction

call plug#begin(g:plug_dir)

Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'aykamko/targets.vim'
Plug 'aykamko/vim-textobj-user'
Plug 'benekastah/neomake'
Plug 'christoomey/vim-tmux-navigator'
Plug 'drn/zoomwin-vim'
Plug 'haya14busa/incsearch.vim'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/vim-easy-align'
Plug 'mhinz/vim-grepper'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'

Plug 'easymotion/vim-easymotion'
      \ | Plug 'aykamko/vim-easyoperator-line'
      \ | Plug 'aykamko/vim-easymotion-segments'
Plug 'mattn/webapi-vim'
      \ | Plug 'mattn/gist-vim', { 'on': 'Gist' }
Plug 'junegunn/goyo.vim',        { 'on': 'Goyo' }
Plug 'scrooloose/nerdtree',      { 'on': ['NERDTreeFind', 'NERDTreeToggle'] }


Plug 'Glench/Vim-Jinja2-Syntax',     { 'for': 'jinja' }
Plug 'a.vim',                        { 'for': ['c', 'cpp'] }
Plug 'fatih/vim-go',                 { 'for': 'go' }
Plug 'hynek/vim-python-pep8-indent', { 'for': 'python' }
Plug 'kchmck/vim-coffee-script',     { 'for': 'coffee' }
Plug 'leafgarland/typescript-vim',   { 'for': 'typescript' }
Plug 'lervag/vimtex',                { 'for': 'tex' }
Plug 'mattn/emmet-vim',              { 'for': ['jinja', 'html'] }
Plug 'nono/vim-handlebars',          { 'for': ['jinja', 'html'] }
Plug 'tpope/vim-rails',              { 'for': 'ruby' }
Plug 'vim-scripts/sh.vim--Cla',      { 'for': ['sh', 'zsh', 'bash'] }

augroup slim_filetype
  autocmd!
  autocmd BufNewFile,BufReadPost *.slim set filetype=slim
augroup END
Plug 'slim-template/vim-slim',       { 'for': 'slim' }

" augroup jsx_filetype
"   autocmd!
"   autocmd BufNewFile,BufReadPost *.jsx set filetype=javascript.jsx
" augroup END
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'

if has('nvim')
  " Plug 'aykamko/gitsync.nvim'
  Plug 'Shougo/deoplete.nvim'
  Plug 'euclio/vim-markdown-composer', { 'for': 'markdown' }
  Plug 'Shougo/neosnippet.vim'
endif

Plug 'junegunn/fzf', {
      \ 'dir': '~/.fzf',
      \ 'do': 'yes \| ./install' }

" Don't install the following plugins on initial PlugInstall (must use PlugInstall! instead)
" Also disable these for now, way too slow

" if empty(glob(g:plug_dir.'YouCompleteMe')) |
"       \ call mkdir(expand(g:plug_dir.'YouCompleteMe'), 'p') | endif
" Plug 'Valloric/YouCompleteMe', {
"       \ 'frozen': 1,
"       \ 'do': './install.py --clang-completer --gocode-completer --tern-completer' ,
"       \ 'on': [] } " lazy loaded through async-vimrc
"
" if empty(glob(g:plug_dir.'YCM-Generator')) |
"       \ call mkdir(expand(g:plug_dir.'YCM-Generator'), 'p') | endif
" Plug 'rdnetto/YCM-Generator',  {
"       \ 'frozen': 1,
"       \ 'branch': 'stable',
"       \ 'for': ['c', 'cpp', 'make'] }

" if empty(glob(g:plug_dir.'ultisnips')) |
"       \ call mkdir(expand(g:plug_dir.'ultisnips'), 'p') | endif
" Plug 'SirVer/ultisnips', {
"       \ 'frozen': 1,
"       \ 'for': [] } " lazy loaded through async-vimrc
"

call plug#end()
filetype plugin indent on " required

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" General Settings {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = ' '
let maplocalleader = ' '

let s:E = '✖'
let s:W = '▲'

" skip checks
let g:python_host_skip_check = 1
let g:python3_host_skip_check = 1

" Don't use virtualenv python
" if !empty($PYENV_SHIMS)
"   let g:python_host_prog='$PYENV_SHIMS/python'
"   let g:python3_host_prog='$PYENV_SHIMS/python3'
" end

" Display
set ruler           " show cursor position
set nonumber        " hide line numbers
set nolist          " hide tabs and EOL chars
set showcmd         " show normal mode commands as they are entered
set noshowmode      " don't show mode becase powerline already does it
set nowrap          " don't wrap long lines

" Scrolling
set scrolloff=5     " minimum of three lines above and below cursor
set scrolljump=5    " scroll five lines at a time vertically
set sidescroll=10   " minumum columns to scroll horizontally

" Search
set nohlsearch      " persist search highlighting, initially
set incsearch       " search with typeahead

" Indent
set autoindent      " carry indent over to new lines

" Clipboard
set clipboard=unnamed " set unnamed to copy to system clipboard

" Mouse
set mouse=a           " enable mouse movement

" Backups
set backupdir=/tmp//,.
set directory=/tmp//,.
if v:version >= 703
  set undodir=/tmp//,.
endif

" Other
set noerrorbells      " no bells in terminal

set tags=tags;/       " search up the directory tree for tags

set undolevels=1000   " number of undos stored
if has('nvim')
  set shada='100,<1000,s100,n$HOME/.nvim.shada
else
  set viminfo='50,"50   " '=marks for x files, "=registers for x files
endif

" hack to always display sign column
augroup display_sign_col
  autocmd!
  autocmd BufEnter * sign define dummy
  autocmd BufEnter * if &buftype !=# 'terminal' |
        \ exec 'sign place 9999 line=1 name=dummy buffer='.bufnr('') |
        \ endif
  if has('nvim')
    " no sign column in terminals pls
    autocmd TermOpen * exec 'sign unplace * buffer='.bufnr('')
    autocmd TermOpen * set bufhidden=delete
    autocmd TermClose * exec 'sign place 9999 line=1 name=dummy buffer='.bufnr('')
  endif
augroup END

" remove small delay when leaving insert mode
if !has('gui_running')
  set ttimeoutlen=10
  augroup fast_escape
    autocmd!
    autocmd InsertEnter * set timeoutlen=0
    autocmd InsertLeave * set timeoutlen=1000
  augroup END
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" Colorscheme {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set termguicolors
syntax enable

set background=dark
try
  colorscheme hybrid_ayk
catch /:E185:/
  " silently ignore if colorscheme not found
endtry

function! GetHiKey(group, key)
  redir => highlight_output
  exec "silent highlight ".a:group
  redir END
  for key_val in split(highlight_output)
    if key_val =~ '^'.a:key
      return key_val[(len(a:key) + 1):]
    endif
  endfor
endfunction
function! Adjust(color, amount)
  let color = (a:color[0] == '#') ? a:color[1:] : a:color
  if type(a:amount) == 5  " float
    let amount = a:amount
  else
    let amount = (a:amount / 100.0)
  endif
  let adj = float2nr(255 * amount)
  let r = max([str2nr(color[0:1], 16) + adj, 0])
  let g = max([str2nr(color[2:3], 16) + adj, 0])
  let b = max([str2nr(color[4:5], 16) + adj, 0])
  return join(['#', printf('%.2x', r), printf('%.2x', g), printf('%.2x', b)], '')
endfunction
function! Darken(color, amount)
  return Adjust(a:color, -a:amount)
endfunction
function! Lighten(color, amount)
  return Adjust(a:color, a:amount)
endfunction

" adjust colorcolumn
exec 'highlight! ColorColumn ctermbg=235 guibg='.
            \ Darken(GetHiKey('Normal', 'guibg'), 0.015)

let g:colorcolumn_blacklist = ['qf']
augroup display_colorcolumn
  autocmd!
  autocmd Filetype <buffer>
        \ if index(g:colorcolumn_blacklist, &ft) < 0 |
        \ setlocal colorcolumn=79,80,99,100,119,120 |
        \ endif
augroup END

" adjust Search highlighting
exec 'highlight! Search guifg=NONE guibg='.
            \ Lighten(GetHiKey('Normal', 'guibg'), 10)

" change vim split line color to differentiate from tmux
highlight! StatusLineNC ctermfg=5
highlight! VertSplit ctermfg=5

" add some extra keywords to Todo highlight group
fu! ExtraTodoHi()
  syn keyword extraTodo HACK INFO BUG NOTE containedin=.*Comment.*
  hi def link extraTodo Todo
endfu
augroup extraTodoHi
  autocmd!
  autocmd VimEnter * call ExtraTodoHi() | autocmd! extraTodoHi
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" Line Numbering {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" toggle number/relativenumber on insert/normal mode
if &buftype !=# 'terminal' | set number | set relativenumber | endif
augroup line_numbering
  autocmd!
  " autocmd! InsertEnter,InsertLeave,FocusLost,FocusGained * TODO: fix these
  autocmd InsertEnter,InsertLeave *
        \ if !get(b:, 'goyo_enabled', 0) && &buftype !=# 'terminal' |
        \ set invrelativenumber | endif
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" Indentation {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab
set backspace=indent,eol,start
set textwidth=99
augroup modify_textwidth
  autocmd!
  autocmd FileType sh,bash,zsh set textwidth=79
augroup END

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 2
hi IndentGuidesOdd ctermbg=NONE
hi IndentGuidesEven ctermbg=234

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" Commands/Mappings {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" remap j/k for wrapped lines; add relative jumps to jumplist
" Source: reddit.com/r/vim/comments/3npf1z/using_jk_for_wrapped_lines_and_adding_jk_with_a/cvq2k3x
function! s:linemotion(dir)
  return (v:count1 > 1 ? "m'".v:count1 : 'g').a:dir
endfunction
nnoremap <silent><expr> j <SID>linemotion('j')
nnoremap <silent><expr> k <SID>linemotion('k')
vnoremap <silent><expr> j <SID>linemotion('j')
vnoremap <silent><expr> k <SID>linemotion('k')

" makes sense
nnoremap <silent> Y yg_
nnoremap <silent> yY ^yg_
nnoremap <silent> dD ^D
nnoremap <silent> cC ^C

" because I suck
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev X x
cnoreabbrev WQ wq
cnoreabbrev Wq wq
cnoreabbrev wQ wq

" move screen by a:cols_dt columns
function! s:horizontal_scroll(cols_dt)
  if a:cols_dt > 0
    return a:cols_dt.'zl'
  elseif a:cols_dt < 0
    return -a:cols_dt.'zh'
  endif
endfunction
nnoremap <silent><expr> z\| <SID>horizontal_scroll(wincol() - (winwidth(0) / 2))

" save to <leader>;
noremap <silent> <leader><leader> :up<CR>
vnoremap <silent> <leader><leader> :<C-U>p<CR>gv

" save+quit to <leader>
noremap <silent> <leader>x :update \| q<CR>
vnoremap <silent> <leader>x :<C-U>update \| q<CR>

" quit/force-quit to <leader>q/Q
noremap <silent> <leader>q :q<CR>
vnoremap <silent> <leader>q :<C-U>q<CR>
noremap <silent> <leader>Q :q!<CR>
vnoremap <silent> <leader>Q :<C-U>q!<CR>

" bind arrows to pageup/pagedown, since I don't use them otherwise
function! s:scroll_half_screen(motion)
  return (winheight('$') / 2).a:motion
endfunction
nnoremap <silent><expr> <Down> <SID>scroll_half_screen('j')
nnoremap <silent><expr> <Up> <SID>scroll_half_screen('k')
vnoremap <silent><expr> <Down> 'gv'.<SID>scroll_half_screen('j')
vnoremap <silent><expr> <Up> 'gv'.<SID>scroll_half_screen('k')

function! s:blackhole_paste(mode)
  if a:mode ==# 'char'
    let start_mark='`['
    let end_mark='`]'
  elseif index(['v', 'V'], a:mode) >= 0
    let start_mark='`<'
    let end_mark='`>'
  endif
  silent exec 'normal! '.start_mark
  let start_col=col('.')
  silent exec 'normal! v'.end_mark.'"bd'
  let end_col=col('.')
  if end_col < start_col  " happens when at end of line
    silent exec 'normal! p'
  else
    silent exec 'normal! P'
  endif
endfunction
function! s:blackhole_delete(mode)
  if a:mode ==# 'char'
    silent exec 'normal! `[v`]"bd'
  elseif index(['v', 'V'], a:mode) >= 0
    silent exec 'normal! `<v`>"bd'
  endif
endfunction
nnoremap <silent> mp :set operatorfunc=<SID>blackhole_paste<CR>g@
vnoremap <silent> mp :<c-u>call <SID>blackhole_paste(visualmode())<CR>
nnoremap <silent> md :set operatorfunc=<SID>blackhole_delete<CR>g@
vnoremap <silent> md :<c-u>call <SID>blackhole_delete(visualmode())<CR>
nnoremap <silent> mm "bdd
nnoremap <silent> dp "bddP

" directional split for file
function! OpenDirectionalSplit(file, ...)
  if len(a:000) > 0
    let dirchoice = a:000[0]
  else
    echohl Question
    echom 'Choose split direction. [hjklt or Enter] '
    echohl Normal
    call inputsave()
    let char = getchar()
    call inputrestore()
    redraw!
    if char == 13  " Enter
      let dirchoice = 'e'
    else
      let dirchoice = nr2char(char)
    end
  end

  if dirchoice == 'e'
    exec 'drop '.a:file
  elseif dirchoice == 'h'
    exec 'aboveleft vsp | drop '.a:file
  elseif dirchoice == 'j'
    exec 'belowright sp | drop '.a:file
  elseif dirchoice == 'k'
    exec 'aboveleft sp | drop '.a:file
  elseif dirchoice == 'l'
    exec 'belowright vsp | drop '.a:file
  elseif dirchoice == 't'
    exec 'tabnew | drop '.a:file
  else
    echohl Error
    echom 'Unknown direction: '.dirchoice
    echohl Normal
  endif
endfunction
command! -bar -nargs=+ DirectionalSplit call OpenDirectionalSplit(<f-args>)

" vimrc and help
command! -nargs=? Vimrc DirectionalSplit $MYVIMRC <args>
cnoreabbrev vimrc Vimrc
command! Vimso source $MYVIMRC
cnoreabbrev vimso Vimso
command! -nargs=* -complete=help Vhelp vertical help <args>
cnoreabbrev vhelp Vhelp

" copy to xclip with Control-C
nnoremap <C-y> :w !xsel<CR><CR>
vnoremap <C-y> "*y

" remap indent to use single >/<
noremap > >>
noremap < <<

" reselects visual box after shift
vnoremap < <gv
vnoremap > >gv

" repeat macro in register q
nnoremap Q @q

" toggle fold more easily
nnoremap z<Space> za

" switching tabs
for i in range(0, 9)
  exec 'nnoremap t'.i.' '.i.'gt'
endfor

" paste in insert mode
" (depends on clipboard setting)
set pastetoggle=<F2>
inoremap <silent> <C-P> <F2><C-R>+<F2>

" get highlight group under cursor
" http://vim.wikia.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
nnoremap <silent> <C-s> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" prettify JSON
command! Prettify %!python -m json.tool

" source: http://stackoverflow.com/a/6271254
function! s:get_visual_selection()
  let [lnum1, col1] = getpos("'<")[1:2]
  let [lnum2, col2] = getpos("'>")[1:2]
  let lines = getline(lnum1, lnum2)
  let lines[-1] = lines[-1][: col2 - (&selection == 'inclusive' ? 1 : 2)]
  let lines[0] = lines[0][col1 - 1:]
  return join(lines, '\n')
endfunction

" search/replace visual selection
function! s:replace_selection(hasrange)
  if a:hasrange > 0
    call feedkeys(':%s/'.s:get_visual_selection().'/', 'm')
  endif
endfunction
command! -range=0 ReplaceSelection call s:replace_selection(<count>)
vnoremap <leader>r :ReplaceSelection<CR>

" kill any trailing whitespace on save (Credit to Facebook)
let g:strip_whitespace_blacklist = ['snippets']
function! s:strip_whitespace()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfunction
augroup kill_whitespace
  autocmd!
  autocmd BufWritePre <buffer>
        \ if index(g:strip_whitespace_blacklist, &ft) < 0 |
        \ call s:strip_whitespace() |
        \ endif
augroup END

" set buffer to unmodifiable if read-only
function! s:set_unmodifiable()
  if &readonly && &modifiable
    setlocal nomodifiable
  endif
endfu
augroup set_unmodifiable
  autocmd!
  autocmd BufReadPost * call s:set_unmodifiable()
augroup END

" zoom into pane
if has('nvim')
    " removed 'key', 'oft', 'sn', 'tx' options which do not work with nvim
    let g:zoomwin_localoptlist = [
          \ "ai","ar","bh","bin","bl","bomb","cfu","ci","cin","cink",
          \ "cino","cinw","cms","com","cpt","diff","efm","eol","ep","et",
          \ "fenc","fex","ff","flp","fo","ft","gp","imi","ims","inde","inex",
          \ "indk","inf","isk","kmp","lisp","mps","ml","ma","mod","nf","ofu",
          \ "pi","qe","ro","sw","si","sts","spc","spf","spl","sua","swf",
          \ "smc","syn","ts","tw","udf","wfh","wfw","wm"
          \ ]
endif

function! s:zoomwin_wrapper()
  let t:zoomed = !get(t:, 'zoomed', 0)
  ZoomWin
endfunction
nnoremap <silent> <leader>z :call <SID>zoomwin_wrapper()<CR>

" vim-tmux aware killpane
function! TmuxAwareKillpane()
  if s:tmux || winnr('$') > 1
    silent :q
  else
    call system('tmux kill-pane')
  endif
endfunction
nmap <silent> <C-x> :call TmuxAwareKillpane()<CR>
" TODO: look this up
" run this command in shell if vim-tmux-navigator isn't working in nvim
" $ infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > $TERM.ti
" $ tic $TERM.ti

" tmux pane title
function! s:xterm_title()
  let title=expand('%:t')
  return empty(title) ? '[No Name]' : title
endfunction
set title
augroup tmux_pane_title
  autocmd!
  autocmd BufReadPost,FileReadPost,BufNewFile,BufEnter *
        \ let &titlestring=s:xterm_title()
augroup END

if has('nvim')
  " directional term splits
  command! -nargs=? Dterm DirectionalSplit term://$SHELL <args> | startinsert
  cnoreabbrev dterm Dterm
  cnoreabbrev dt Dterm

  function! s:localdterm(...) abort
    let curdir = getcwd()
    exec join(extend(['Dterm'], a:000))
    exec 'lcd '.expand('%:p:h')
  endfunction

  command! -nargs=? LDterm call <sid>localdterm(<f-args>)
  cnoreabbrev ldterm LDterm
  cnoreabbrev d. LDterm

  " terminal mappings
  tnoremap <C-w>h <C-\><C-n><C-w>h
  tnoremap <C-w>j <C-\><C-n><C-w>j
  tnoremap <C-w>k <C-\><C-n><C-w>k
  tnoremap <C-w>l <C-\><C-n><C-w>l

  augroup term_autocmds
    autocmd!

    " escape terminal mappings
    autocmd TermOpen * tnoremap <buffer> <Esc><Esc> <C-\><C-n>
    autocmd FileType fzf tunmap <buffer> <Esc><Esc>

    " focus terminal automatically
    autocmd BufEnter term://* startinsert
  augroup END
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" tComment {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use <leader>c to comment lines of code
map <leader>c :TComment<CR>
vmap <leader>c :TComment<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" Lightline {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2   " Always show the statusline
let g:lightline = {
      \   'colorscheme': 'Tomorrow_Night',
      \   'active': {
      \     'left': [['zoom', 'mode', 'paste'], ['fileinfo', 'syntax_err', 'syntax_war']],
      \     'right': [['lineinfo'], ['fugitive'], ['filetype', 'winnr']]
      \   },
      \   'inactive': {
      \     'left': [['fileinfo']],
      \     'right': [['lineinfo'], ['fugitive'], ['filetype', 'winnr']]
      \   },
      \   'component': {
      \     'winnr': '%{winnr()}',
      \     'fugitive': '%{exists("*fugitive#head")?fugitive#head(5):""}',
      \   },
      \   'component_function' : {
      \     'zoom': 'LLZoom',
      \     'mode': 'LLMode',
      \     'fileinfo': 'LLFileInfo',
      \     'lineinfo': 'LLLineInfo',
      \     'filetype': 'LLFileType',
      \   },
      \   'component_expand' : {
      \     'gitsync': 'Gitsync',
      \     'syntax_err': 'SyntaxError',
      \     'syntax_war': 'SyntaxWarning',
      \   },
      \   'component_type': {
      \     'gitsync': 'error',
      \     'syntax_err': 'error',
      \     'syntax_war': 'warning',
      \   },
      \ }

function! Gitsync()
  if !get(g:, 'gitsync_initialized', 0) | return '' | endif
  return GitsyncStatus(bufnr('%'))
endfunction

function! SyntaxError()
  if !exists('*neomake#statusline#LoclistCounts') | return '' | endif
  let counts = b:neomake_loclist_counts
  if !has_key(counts, 'E') | return '' | endif
  return printf('%s %d', s:E, counts['E'])
endfunction
function! SyntaxWarning()
  if !exists('*neomake#statusline#LoclistCounts') | return '' | endif
  let counts = b:neomake_loclist_counts
  if !has_key(counts, 'W') | return '' | endif
  return printf('%s %d', s:W, counts['W'])
endfunction

" mode
function! LLMode()
  return  &ft =~ 'nerdtree' ? 'nerdtree' :
        \ &ft =~ 'fzf' ? 'FZF' :
        \ lightline#mode()
endfunction

" zoom
function! LLZoom()
  return (exists('t:zoomed') && t:zoomed) ? 'ZOOM' : ''
endfunction

" filename and fileinfo
let g:pathname_depth = 3
function! LLModified()
  return index(['help', 'nerdtree'], &ft) > -1 ? '' :
        \ &modified ? '+' : ''
endfunction
function! LLReadonly()
  return index(['help', 'nerdtree'], &ft) < 0 && &readonly ? '🔒' : ''
endfunction
function! LLTrucatedFilePath()
  if (&ft =~ 'nerdtree' || &buftype ==# 'terminal') | return '' | endif
  let fullpath = expand('%:p:~')
  return empty(fullpath) ? '[No Name]' :
        \ matchstr(fullpath,
        \   printf('\(\~\)\?\(/[0-9a-zA-Z_~\-. ]\+\)\{,%d}/[0-9a-zA-Z_\-. ]\+$',
        \   get(g:, 'pathname_depth', 3)))
endfunction
function! LLFileInfo()
  if index(['nerdtree', 'fzf'], &ft) > -1 | return '' | endif
  let segments = [LLReadonly(), LLTrucatedFilePath(), LLModified()]
  return substitute(join(segments, ' '), '^\s*\(.\{-}\)\s*$', '\1', '')
endfunction
function! LLLineInfo()
  if index(['nerdtree', 'fzf'], &ft) > -1 | return '' | endif
  let [_, l, c, _] = getpos('.')
  return l.':'.c
endfunction
function! LLLineInfo()
  if index(['nerdtree', 'fzf'], &ft) > -1 | return '' | endif
  return &ft
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" vim-easyalign {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. <leader>aip)
nmap <leader>a <Plug>(EasyAlign)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" a.vim {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" toggle between .h and .c with <leader>a
nnoremap <leader>a :A<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" deoplete {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if s:plug_exists('deoplete.nvim')
  let g:deoplete#enable_at_startup = 1

  imap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "<Tab>"
  imap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "<S-Tab>"
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" neosnippet {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if s:plug_exists('neosnippet.vim')
  let g:neosnippet#snippets_directory = $HOME.'/.vim/snippets'
  let g:neosnippet#disable_runtime_snippets = {
        \ '_': 1,
        \ } " disable built-in snippets

  " expand snippets with Enter
  imap <silent><expr> <CR> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)" : "\<CR>"
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" Neomake {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:neomake_verbose = 0 " useful for debug

exec "highlight! NeomakeError ctermfg=red guifg=".GetHiKey('Error', 'guifg')
exec "highlight! NeomakeWarning ctermfg=yellow guifg=".GetHiKey('Todo', 'guifg')

let g:neomake_error_sign = {
      \ 'text': s:E,
      \ 'texthl': 'NeomakeError',
      \ }
let g:neomake_warning_sign = {
      \ 'text': s:W,
      \ 'texthl': 'NeomakeWarning',
      \ }

let g:neomake_statusline_callback = 'lightline#update'
if executable('pylama')
  let g:neomake_python_enabled_makers = ['pylama']
endif
let g:neomake_tex_enabled_makers = []

function! ToggleLocationList()
  if empty(filter(tabpagebuflist(), 'getbufvar(v:val, "&buftype") is# "quickfix"'))
    lwindow
  else
    lclose
  endif
endfunction
nnoremap <silent> <leader>1 :call ToggleLocationList()<CR>

command! -nargs=0 DisableNeomake let b:neomake_enabled=0

function! NeomakeLightlineCallback(callback_dict)
  if !a:callback_dict['has_next']
    " TODO: figure out with neomake supports per-buffer loclist counts by default
    let b:neomake_loclist_counts = neomake#statusline#LoclistCounts()
    call lightline#update()
  endif
endfunction

augroup postwrite_neomake
  autocmd!
  autocmd BufWinEnter,BufWritePost *
        \ if !get(b:, 'goyo_enabled', 0) && get(b:, 'neomake_enabled', 1) |
        \ call neomake#Make(1, [], function("NeomakeLightlineCallback")) |
        \ endif
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" fzf {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cnoreabbrev fzf FZF
cnoreabbrev f FZF

let g:fzf_action = {
      \ 'ctrl-t': 'tab split | drop',
      \ 'ctrl-x': 'split | drop',
      \ 'ctrl-v': 'vsplit | drop',
      \ 'ctrl-s': 'DirectionalSplit' }

function! s:git_fzf(...)
  if len(a:000) > 0
    let from_dir=a:000[0]
  else
    let from_dir='.'
  endif
  let gitroot=system('git -C '.from_dir.' rev-parse --show-toplevel')
  if v:shell_error
    exec 'FZF --header="Searching from: '.from_dir.'" '.from_dir
  else
    let gitroot=substitute(gitroot, '\n\+$', '', 'g').'/' " strip trailing newlines
    exec 'FZF -d '.gitroot.' --with-nth=2 --header="Git Repo: '.gitroot.'" '.gitroot
  endif
endfunction

nnoremap <silent> <leader>o :call <SID>git_fzf()<CR>
nnoremap <silent> <leader>. :call <SID>git_fzf(expand('%:p:h'))<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" vim-grepper {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:grepper = {
      \ 'tools': ['ag', 'git', 'grep'],
      \ 'open': 1,
      \ 'jump': 0,
      \ }

let g:grepper.ag =
      \ { 'grepprg': 'ag --vimgrep $* `git rev-parse --show-toplevel`' }

command! -nargs=* Ag Grepper -noprompt -tool ag -query <args>
cnoreabbrev ag Ag

nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" vim-easymotion {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" enable easymotion with one leaderkey press
map <leader> <Plug>(easymotion-prefix)

" blue and green ayyy lmao
hi EasyMotionTarget ctermfg=39
hi EasyMotionTarget2First ctermfg=40
hi EasyMotionTarget2Second ctermfg=28

" vim-easyoperator-line
let s:EasyOperator_line_do_mapping = 0
let s:EasyOperator_line_first = 'CursorLine'
omap <silent>  <leader>l <Plug>(easyoperator-line-select)
xmap <silent>  <leader>l <Plug>(easyoperator-line-select)
nmap <silent> d<leader>l <Plug>(easyoperator-line-delete)
nmap <silent> y<leader>l <Plug>(easyoperator-line-yank)

" vim-easymotion-segments
let g:EasyMotionSegments_key = 's'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" Text Objects {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-textobj-user.vim
augroup TextobjUserSetup
  autocmd!
  autocmd BufEnter * call TextobjUserSetup()
augroup END

function! TextobjUserSetup()
  if get(g:, 'textobj_user_loaded', 0)
    " textobj for current line
    " Copied from: https://github.com/kana/vim-textobj-user
    call textobj#user#plugin('line', {
          \   '-': {
          \     'select-a': 'al', 'select-a-function': 'TextobjCurrentLineA',
          \     'select-i': 'il', 'select-i-function': 'TextobjCurrentLineI',
          \   },
          \ })

    function! TextobjCurrentLineA()
      normal! 0
      let head_pos = getpos('.')
      normal! $
      let tail_pos = getpos('.')
      return ['v', head_pos, tail_pos]
    endfunction

    function! TextobjCurrentLineI()
      normal! ^
      let head_pos = getpos('.')
      normal! g_
      let tail_pos = getpos('.')
      let non_blank_char_exists_p = getline('.')[head_pos[2] - 1] !~# '\s'
      return
            \ non_blank_char_exists_p
            \ ? ['v', head_pos, tail_pos]
            \ : 0
    endfunction

    " textobj to turn foo_bar_baz into foo_baz *and* quuxSpamEggs into quuxEggs
    " Copied from: https://github.com/Julian/vim-textobj-variable-segment/blob/master/plugin/textobj/variable-segment.vim
    call textobj#user#plugin('variable', {
          \ '-': {
          \     'select-a': 'as',  'select-a-function': 'TextobjSelectSegmentA',
          \     'select-i': 'is',  'select-i-function': 'TextobjSelectSegmentI',
          \ }})

    function! TextobjSelectSegment(object_type, right_boundary)
      let left_boundaries = ['_\+\i', '\<', '\l\u', '\u\u\ze\l', '\a\d', '\d\a', '#\a']
      call search(join(left_boundaries, '\|'), 'bce')
      let start_position = getpos('.')

      call search('\>', 'c')
      let word_end = getpos('.')
      call setpos('.', start_position)

      call search(a:right_boundary, 'c')
      for _ in range(v:count1 - 1)
        if getpos('.') != word_end
          call search(a:right_boundary)
        endif
      endfor
      let end_position = getpos('.')

      return ['v', start_position, end_position]
    endfunction

    function! TextobjSelectSegmentA()
      let right_boundaries = ['_', '\l\u', '\u\u\l', '\a\d', '\d\a', '\i\>', '\a#']
      let right_boundary = join(right_boundaries, '\|')
      let [type, start_position, end_position] = TextobjSelectSegment('a', right_boundary)
      let [_, start_line, start_column, _] = start_position

      call search('\i\>', 'c')
      if end_position == getpos('.') &&
            \ getline(start_line)[start_column - 2] =~# '_'
        let start_position[2] -= 1
      endif

      let was_small_camel = match(expand('<cword>'), '^_*\l.*\u') != -1
      if was_small_camel
        call search('\<', 'bc')
        let [_, _, word_start, _] = getpos('.')

        if start_column - 2 <= word_start ||
              \ getline(start_line)[:start_column - 2] =~# '^_*$'
          call setpos('.', end_position)
          normal! l~
        endif
      endif

      return [type, start_position, end_position]
    endfunction

    function! TextobjSelectSegmentI()
      let right_boundaries = ['\i_', '\l\u', '\u\u\l', '\a\d', '\d\a', '\i\>', '\a#']
      return TextobjSelectSegment('i', join(right_boundaries, '\|'))
    endfunction

    " select entire file
    " Source: https://github.com/kana/vim-textobj-entire
    call textobj#user#plugin('entire', {
          \      '-': {
          \        '*sfile*': expand('<sfile>:p'),
          \        'select-a': 'ae',  '*select-a-function*': 'TextobjSelectEntireA',
          \        'select-i': 'ie',  '*select-i-function*': 'TextobjSelectEntireI'
          \      }
          \    })

    function! TextobjSelectEntireA()
      " To easily back to the last position after a command.
      " For example: yae<C-o>
      mark '

      keepjumps normal! gg0
      let start_pos = getpos('.')

      keepjumps normal! G$
      let end_pos = getpos('.')

      return ['V', start_pos, end_pos]
    endfunction

    function! TextobjSelectEntireI()
      " To easily back to the last position after a command.
      " For example: yie<C-o>
      mark '

      keepjumps normal! gg0
      call search('^.', 'cW')
      let start_pos = getpos('.')

      keepjumps normal! G$
      call search('^.', 'bcW')
      normal! $
      let end_pos = getpos('.')

      return ['V', start_pos, end_pos]
    endfunction

  endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" incsearch.vim {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" stay on *
map <silent> g* :let @/='\<'.expand('<cword>').'\>'<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" Goyo {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! s:goyo_enter()
  set noshowmode
  set noshowcmd
  let b:goyo_enabled = 1
  let b:quitting = 0
  let b:quitting_bang = 0
  augroup goyo_quitpre
    autocmd!
    autocmd QuitPre <buffer> let b:quitting = 1
  augroup END
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
  set showmode
  set showcmd
  let b:goyo_enabled = 0
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
  autocmd! goyo_quitpre
endfunction

augroup goyo
  autocmd!
  autocmd User GoyoEnter nested call <SID>goyo_enter()
  autocmd User GoyoLeave nested call <SID>goyo_leave()
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" Gitsync {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:gitsync_callback = 'lightline#update'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" NERDTree {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let NERDTree hijack netrw while still having async load
let g:NERDTreeHijackNetrw = 1
function! s:plugasync_nerdtree_checkForBrowse(dir)
  silent! autocmd! FileExplorer
  if a:dir != '' && isdirectory(a:dir)
    if !exists('#NERDTree') | call plug#load('nerdtree') | endif
    call nerdtree#checkForBrowse(dir)
  endif
endfunction
augroup async_nerdtree
  autocmd!
  autocmd VimEnter * call s:plugasync_nerdtree_checkForBrowse(expand("<amatch>"))
augroup END

nnoremap <silent> <leader>k :NERDTreeFind<CR>
nnoremap <silent> <leader>l :NERDTreeToggle<CR>

let g:NERDTreeWinSize = 35
let g:NERDTreeQuitOnOpen = 1

" close Vim if NERDTree is the only window left
augroup nerdtree_solo_close
  autocmd!
  autocmd BufEnter *
        \ if (winnr("$")==1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) |
        \ q |
        \ endif
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" Filetype {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" line wrap sucks for some files, but it's nice to choose the wrap width
function! s:manual_format(type, ...)
  let og_width = &textwidth
  let manual_width = get(b:, 'tw', -1)
  if manual_width == -1 | let manual_width = get(g:, 'tw', &textwidth) | endif
  exec 'set textwidth='.manual_width

  if a:0  " Invoked from Visual mode
    silent exe "normal! '<v'>gq"
  elseif a:type == 'line'
    silent exe "normal! '[V']gq"
  elseif a:type == 'block'
    silent exe "normal! '[\<C-V>']gq"
  else
    silent exe "normal! '[v']gq"
  endif

  exec 'set textwidth='.og_width
endfunction!

augroup vimrc_filetype
  autocmd!
  autocmd BufNewFile,BufReadPost *.md set filetype=markdown
  autocmd BufNewFile,BufReadPost Vagrantfile set filetype=ruby
  autocmd FileType c,cpp,vim,javascript,coffee,html,jinja setl sw=2 sts=2 et
  autocmd BufNewFile,BufReadPost COMMIT_EDITMSG
        \ set textwidth=72 |
        \ set colorcolumn=71,72 |
        \ call matchaddpos('ColorColumn', [[1, 49, 2]])
  autocmd Filetype tex,markdown,noft,text
        \ set wrap |
        \ set breakindent |
        \ set linebreak |
        \ set textwidth=9999 |
        \ exec 'nnoremap <silent> $ g$' |
        \ exec 'nnoremap <silent> ^ g^' |
        \ let b:tw = 119 |
        \ exec 'nnoremap <silent> gq :set opfunc=<SID>manual_format<CR>g@' |
        \ exec 'vnoremap <silent> gq :<C-U>call <SID>manual_format(visualmode(), 1)<CR>'
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" Fugitive {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if get(g:, 'colors_name', 'NONE') == 'hybrid_ayk'
  hi! DiffAdd    guifg=NONE guibg=#1d2821
  hi! DiffChange guifg=NONE guibg=#1d1f34
  exec "hi! DiffDelete guifg=".GetHiKey('Normal', 'guibg')." guibg=#381f21"
  exec "hi! DiffText   guifg=".GetHiKey('Normal', 'guifg')." guibg=#1d1f60"
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" nvim-bridge {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('nvim')
  augroup LaunchNvimBridge
    autocmd!
    autocmd VimEnter * let g:nvim_bridge_jid = jobstart(split('nvim-bridge --sock '.$NVIM_LISTEN_ADDRESS))
          \ | autocmd! extraTodoHi
  augroup END
end
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
