###############################################################################
# Settings
###############################################################################
# use UTF8 - broken in vagrant
set -g utf8
set-window-option -g utf8 on

set-window-option -g automatic-rename off

# Enable native Mac OS X copy/paste
set-option -g default-command "/bin/bash -c 'which reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace $SHELL -l || exec $SHELL -l'"

# Start numbering at 1
set -g base-index 1

# Allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Mouse mode
set-window-option -g mode-mouse on
set-option -g mouse-select-pane on
set-option -g mouse-resize-pane on
set-option -g mouse-select-window on

# 256-color
set -g default-terminal "screen-256color"

# history limit
set-option -g history-limit 10000

# extra environment variables to pass into new tmux sessions
set-option -ga update-environment ' VIRTUAL_ENV'

###############################################################################
# Bindings
###############################################################################
# reload ~/.tmux.conf using PREFIX r
bind r source-file ~/.tmux.conf \; display "Tmux conf reloaded!"

# Remap C-b to C-a
set -g prefix C-a
bind C-a last-window

# Allows us to use C-a a <command> to send commands to a TMUX session inside 
# another TMUX session
bind a send-prefix

# smart pane switching with awareness of vim splits
# must install vim-tmux-navigator in vim
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-Left  if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-Down  if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-Up    if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-Right if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# resize panes using PREFIX H, J, K, L
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

# cycle windows
bind -n C-w next-window
bind -n C-q previous-window

# bind window hotkeys
bind-key -n C-0 select-window -t :0
bind-key -n C-1 select-window -t :1
bind-key -n C-2 select-window -t :2
bind-key -n C-3 select-window -t :3
bind-key -n C-4 select-window -t :4
bind-key -n C-5 select-window -t :5
bind-key -n C-6 select-window -t :6
bind-key -n C-7 select-window -t :7
bind-key -n C-8 select-window -t :8
bind-key -n C-9 select-window -t :9

# no confirmation on kill-pane or kill-window
bind-key & kill-window
bind-key x kill-pane
set-option -g renumber-windows on

# Vi copypaste mode
set-window-option -g mode-keys vi
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection

# auto window rename
set-window-option -g automatic-rename

# split pane/window on current directory
bind-key -r c new-window -c "#{pane_current_path}"
bind-key -r % split-window -h -c "#{pane_current_path}"
bind-key -r '"' split-window -v -c "#{pane_current_path}"
bind-key -r \ split-window -h -c "#{pane_current_path}"
bind-key -r - split-window -v -c "#{pane_current_path}"

# pane swapping
bind-key -r "," swap-pane -U
bind-key -r "." swap-pane -D

# make panes even horizontally/vertically
bind-key -r h select-layout even-horizontal
bind-key -r v select-layout even-vertical

# break pane
bind-key -r b break-pane

###############################################################################
# Status Bar
###############################################################################
set-option -g status-utf8 on

# status bar format
set-option -g status-position top
set-option -g status-bg colour235
set-option -g status-fg yellow
set-option -g status-attr default

# window format
setw -g window-status-format " #I:#W "
setw -g window-status-current-format " #I:#W "
setw -g window-status-fg white
setw -g window-status-bg default
setw -g window-status-current-fg yellow
setw -g window-status-current-bg colour236

# pane border
set-option -g pane-border-fg colour235
set-option -g pane-active-border-fg colour240
set-option -g pane-active-border-bg default

# message text
set-option -g message-bg colour235
set-option -g message-fg yellow

set -g status-interval 1
set -g status-justify left # left align window list
set -g status-left-length 20
set -g status-right-length 140
set -g status-left ''
set -g status-right '#[fg=blue]#S #[fg=black]• #[fg=magenta,bg=default]#(echo $\(\($\(date +%%s\)\- $\(sysctl -n kern.boottime | cut -c9-18\)\)\) | awk "{printf\(\\\"%%dd %%dh %%dm\\\",\(\\\$1/60/60/24\),\(\\\$1/60/60%%24\),\(\\\$1/60%%60\)\)}") #[fg=colour15]%a %b %d %l:%M %p#[default] #[fg=black]• #[fg=green]#h #[fg=black]#[default]'
