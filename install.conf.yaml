# vim: set sw=4:sts=4:et:
- clean: ['~', '~/.*']
- shell:
    - description: Update submodules in dotfiles repo.
      command: |

        cd ~/dotfiles
        git submodule update --init --recursive

# ----- zsh -----
- clean: ['~/.zprezto/modules/prompt/functions']

- shell++:
    - description: Install ZSH
      condition: '! hash zsh'
    - stdall: true
      platforms:
        linux: sudo apt-get install zsh < /dev/tty > /dev/tty 2>&1

- shell++:
    - description: Clone zprezto from Github
      condition: '[ ! -d "${ZDOTFIR:-$HOME}/.zprezto" ]'
      command: |

        git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto";
            for rcfile in $(find "${ZDOTDIR:-$HOME}"/.zprezto/runcoms -not -path '*\.md' -type f); do
            ln -sf "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile##*/}";
        done

- shell++:
    - description: Set ZSH as default shell
      condition: 
      stdall: true
      command: sudo chsh -s $(which zsh) $(whoami)

- link:
    ~/.zshrc:
        path: zsh/zshrc
        force: true
    ~/.zprofile:
        path: zsh/zprofile
        force: true
    ~/.zpreztorc:
        path: zsh/zpreztorc
        force: true
    ~/.zprezto/modules/prompt/functions/prompt_ayk_setup:
        path: zsh/zprezto/modules/prompt/functions/prompt_ayk_setup
        relink: true

- shell:
    - description: Link zsh configs
      command: |

        for f in $(find "$HOME/dotfiles/zsh" -maxdepth 1 -type f | grep "zshrc.os"); do
            if uname | grep -iq "${f##*/zshrc.os.}"; then
                ln -sf "${f}" "$HOME/.zshrc.os";
                break;
            fi
        done

# ----- vim -----
- clean:
  - '~/.vim'
  - '~/.vim/colors'

- link:
    ~/.vimrc: vim/vimrc
    ~/.vim/vimrc_small:
        path: vim/vimrc_small
        create: true
    ~/.vim/UltiSnips:
        path: vim/vim/UltiSnips
        create: true
    ~/.vim/ycm_extra_conf.py:
        path: vim/vim/ycm_extra_conf.py
        create: true
    ~/.vim/colors/hybrid-ayk.vim:
        path: vim/vim/colors/hybrid-ayk.vim
        create: true

- shell++:
    - description: Build Neovim
      condition: '! hash nvim'
    - prompt: Install Neovim? (May require building from source)
      default: true
    - stdall: true
      platforms:
        darwin: |

           nvim_suffix() {
               sudo update-alternatives --install /usr/bin/vi vi /usr/bin/nvim 60
               sudo update-alternatives --config vi
               sudo update-alternatives --install /usr/bin/vim vim /usr/bin/nvim 60
               sudo update-alternatives --config vim
               sudo update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 60
               sudo update-alternatives --config editor

               sudo pip install neovim
               if hash pip3 2>/dev/null; then
                   sudo pip3 install neovim
               fi
           }
           if ! hash apt-get 2>/dev/null || test -h $(which apt-get); then
               build_from_src() {
                   echo -n "Neovim has to build from source! Continue anyway? [Y|n]"
                   read choice
                   case "$choice" in
                       n|N )
                           exit 0;;
                       * )
                           break;;
                   esac

                   sudo yum -y install libtool autoconf automake cmake gcc gcc-c++ make pkgconfig unzip xclip
                   git clone https://github.com/neovim/neovim ~/neovim
                   pushd ~/neovim
                   make
                   sudo make install
                   popd
                   nvim_suffix

                   echo -n "Keep Neovim folder at ~/neovim? [Y|n]"
                   read choice
                   case "$choice" in
                       n|N )
                           rm -rf ~/neovim
                           exit 0;;
                       * )
                           break;;
                   esac
               }
               build_from_src
           else
               apt_get_nvim() {
                   sudo apt-get install -y software-properties-common
                   sudo add-apt-repository ppa:neovim-ppa/unstable
                   sudo apt-get update
                   sudo apt-get install -y neovim
                   sudo apt-get install -y python-dev python-pip python3-dev python3-pip xclip
                   nvim_suffix
               }
               apt_get_nvim
           fi

- shell:
    - description: Link neovim to vim
      command: |

        mkdir -p ${XDG_CONFIG_HOME:=$HOME/.config}
        ln -sf ~/.vim $XDG_CONFIG_HOME/nvim
        ln -sf ~/.vimrc $XDG_CONFIG_HOME/nvim/init.vim


# ----- git -----
- link:
    ~/.gitconfig:
        path: git/gitconfig
        force: true
    ~/.gitconfig.user: git/gitconfig.user
    ~/.gitignore_global: git/gitignore_global

- shell:
    - description: Link git config
      command: |

        for f in $(find "$HOME/dotfiles/git" -maxdepth 1 -type f | grep "gitconfig.os"); do
            if uname | grep -iq "${f##*/gitconfig.os.}"; then
                ln -sf "${f}" "$HOME/.gitconfig.os";
                break;
            fi
        done


# ----- tmux -----
- link:
    ~/.tmux.conf: tmux/tmux.conf

- shell++:
    - description: Build tmux 2.1 from source
      condition: '! hash tmux 2>/dev/null || ! tmux -V | grep -q 2.1'
    - prompt: Download and build tmux v2.1? (May require additional packages)
      default: true
    - stdall: true
      platforms:
        darwin: 'echo' #TODO
        linux: sudo apt-get install automake pkg-config libevent-dev ncurses-dev
    - stdall: true
      command: |

        curl -L https://api.github.com/repos/tmux/tmux/tarball/310f0a9 > /tmp/tmux-2.1.tar.gz
        cd /tmp
        tar -zxvf tmux-2.1.tar.gz
        cd tmux-tmux-310f0a9
        sh autogen.sh
        ./configure
        make
        sudo make install
        cd ..
        rm -rf tmux-2.1.tar.gz tmux-tmux-310f0a9

# ----- virtualenv -----
- clean: ['~/.pyvirtualenvs']
- link:
    ~/.pyvirtualenvs/postactivate:
        force: true
        path: virtualenv/postactivate
        create: true
    ~/.pyvirtualenvs/postdeactivate:
        force: true
        path: virtualenv/postdeactivate
        create: true
