[color]
    ui = always
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red
    new = green
[color "status"]
    added = green
    changed = yellow
    untracked = red
[alias]
    # add
    a = add
    chunkyadd = add --patch

    # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    snapshots = !git stash list --grep snapshot

    assume   = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed  = "!git ls-files -v | grep ^h | cut -c 3-"

    testpush = "!git add -A :/ && git commit --allow-empty -m \"test push at $(date)\" && git push --force"

    syncignore = "!git rm --cached `git ls-files -i --exclude-from=.gitignore`"

    #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
    recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

    # branch
    b = branch -v

    # commit
    c = commit
    cm = commit -m
    ca = commit -am
    ci = commit
    amend = commit --amend
    ammend = commit --amend
    oops = commit --amend --no-edit
    empty = commit --allow-empty -m

    # checkout
    co = checkout
    nb = checkout -b
    ours = checkout --ours
    theirs = checkout --theirs

    # cherry-pick
    cp = cherry-pick

    # diff
    d = diff
    ds = diff --staged
    last = diff HEAD^

    # log
    l = log --graph --date=short
    ls = log --graph --date=short -n 10
    l1 = log --format=fuller -n 1
    ls1 = log --format=fuller -n 1
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    simple = log --pretty=format:\" * %s\"
    shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

    # tags
    tagcommit = !sh -c 'git rev-list $0 | head -n 1'

    # pull
    pl = pull
    clobber = "!BRANCH=`git rev-parse --abbrev-ref HEAD`; \
        git fetch ${1:-origin} $BRANCH; \
        git checkout FETCH_HEAD || exit; \
        git branch -D $BRANCH; \
        git checkout -b $BRANCH; \
        git branch --set-upstream-to=${1:-origin}/$BRANCH $BRANCH"

    # push
    ps = push
    sync = "!sync(){ git push -u ${1:-origin} `git rev-parse --abbrev-ref HEAD`; }; sync"
    track = branch --track
    upstream = branch --track
    shove = push -f

    # rebase
    rb = rebase
    rbC = rebase --continue
    rbS = rebase --skip
    rbA = rebase --abort

    # remote
    r = remote -v

    # reset
    cleanall = "!(cd $(git rev-parse --show-toplevel) && git clean -xdf)"
    unstage = reset HEAD
    uncommit = reset --soft HEAD^
    filelog = log -u
    mt = mergetool

    # stash
    ss = stash
    sl = stash list
    sa = stash apply
    sd = stash drop
    stashf = "!f() { [ -f $HOME/dotfiles/bin/git_stash_fzf ] && zsh $HOME/dotfiles/bin/git_stash_fzf || echo 'FZF stash script not found!'; }; f"

    # status
    s = status
    st = status
    stat = status

    # tag
    t = tag -n

    # arc
    arc-clean = "!for b in $(git branch --color=never | egrep -e '^\\s+arcpatch'); do \
        git branch -D \"${b}\"; \
        done"
[format]
    pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
    prompt = false
[mergetool "mvimdiff"]
    cmd="vim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
    keepbackup=false
[merge]
    summary = true
    verbosity = 1
    tool = mvimdiff
[apply]
    whitespace = nowarn
[pull]
    rebase = true
[push]
    # 'git push' will push the current branch to its tracking branch
    # the usual default is to push all branches
    default = upstream
[core]
    autocrlf = false
    excludesfile = ~/.gitignore_global
    editor = "type nvim-bridge >/dev/null 2>&1 && \
        nvim-bridge-send \"builtin:gitcommit:$@\" || \
        vim"
[advice]
    statusHints = false
[diff]
    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true
    algorithm = histogram
[column]
    ui = auto
[rerere]
    # Remember my merges
    # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
    enabled = true
[include]
    path = .gitconfig.user
    path = .gitconfig.os
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
