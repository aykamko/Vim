PROFILE_STARTUP=false
if [[ "$PROFILE_STARTUP" == true ]]; then
  zmodload zsh/datetime
  setopt promptsubst
  PS4=$'+$EPOCHREALTIME %N:%i> '
  mkdir -p $HOME/temp/zsh_startlog
  exec 3>&2 2>$HOME/temp/zsh_startlog/$$
  setopt xtrace prompt_subst
fi

# vim
if hash nvim 2>/dev/null; then
  if hash nvim-client 2>/dev/null; then
    alias vi=nvim-client
    alias vim=nvim-client
  else
    alias vi=nvim
    alias vim=nvim
  fi
else
  alias vi=vim
fi

alias vimrc='vi ~/.vimrc'
alias vis='vi -u ~/.vim/vimrc_small'
alias vimrc_small='vis ~/.vim/vimrc_small'

swpclean() { find . -name '*.sw*' -exec /bin/rm -rf {} \; ; }

vimreplace() {
  [[ $# < 2 ]] && echo 'Not enough arguments' && return

  local search
  hash ag 2>/dev/null && \
    search="ag -l --nocolor $1" || \
    search="grep -rl $1 *"

  local -a matches
  while read line; do
    matches+=$line
  done < <(eval $search)
  vim -c "bufdo %s/$1/$2/gec | update" ${matches}
}

###############################################################################
# Aliases & Functions
###############################################################################
# basics
alias c=clear
clr() {
  clear
  [ -n $TMUX ] && tmux clear-history
}
stripansi() {
  [[ "$OSTYPE" == *"darwin"* ]] && \
    sed -E "s/"$'\E'"\[([0-9]{1,2}(;[0-9]{1,2})*)?m//g" ||
    sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})*)?m//g"
}

# Facebook Path Picker
alias pp=fpp

# zsh
alias zshso='source ~/.zshrc'
alias zshrc='vi ~/.zshrc'
alias zprofile='vi ~/.zprofile'
alias zpreztorc='vi ~/.zpreztorc'

# tmux
ta() { [[ -z $TMUX ]] && tmux attach -t "$@" || tmux switch -t "$@" }

tkill() {
  case $1 in
    (-1)
      command tmux kill-session;;
    (-a|--all)
      command tmux kill-session -a;;
    (*)
      command tmux kill-session -a
      command tmux kill-session;;
  esac
}

alias tl='tmux ls'
alias detach='tmux detach'
alias tmuxconf="vi ~/.tmux.conf"
alias tconf='tmuxconf'
alias tname='tmux rename-session'

tpp() { [[ -z $TMUX ]] && echo 'Not in tmux!' || command tmux capture-pane -pe | fpp; }

# julia
alias jl=julia

# python
alias ipy=ipython
alias py=python
alias py3=python3

if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
  workon() { unset -f workon && source /usr/local/bin/virtualenvwrapper.sh && workon "$@"; }
  [[ -n ${VIRTUAL_ENV} ]] && workon ${VIRTUAL_ENV:t} # autostart virtualenv
fi

# if hash pylama 2>/dev/null; then
#   pylama() { # pylama should use pylama.ini at root of git repo
#     local gitroot=$(git rev-parse --show-toplevel 2>/dev/null)
#     [[ $? -ne 0 || $* == *"-o"* || $* == *"--options"* ]] && \
#       pylama $* || \
#       pylama --options "${gitroot}/pylama.ini" "$@"
#   }
# fi

upsearch() { # modified from http://unix.stackexchange.com/questions/13464
  local curdir="$PWD"
  while 1; do
    [ -f "$curdir/$1" ] && echo "$curdir/$1" && return
    [[ "$curdir" == "/" ]] && return
    curdir=$(dirname "$curdir")
  done
}
dmake() { # django
  local django=$(upsearch manage.py)
  [[ -n "$django" ]] && \
    python "$django" "$@" || \
    echo "Couldn't find manage.py"
}

# ruby
if hash rbenv 2>/dev/null; then
  eval "$(rbenv init -)"
fi

# nvm/node
if hash nvm 2>/dev/null; then
  export NVM_DIR=$HOME/.nvm
  nvm() { unset -f nvm && source $(brew --prefix nvm)/nvm.sh && nvm "$@"; }
fi

# git
hash hub 2>/dev/null && alias git=hub
alias g=git

# context from root of git directory
gr() {
  local root=$(command git rev-parse --show-toplevel 2> /dev/null)
  [[ $? != 0 ]] && \
    cd "$@" || \
    [[ $# == 0 ]] && cd $root || \
    (builtin cd $root && "$@")
}

if hash tag 2>/dev/null; then
  ag() { command tag "$@"; source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null }
  tag() { command tag "$@"; source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null }
fi

# other
alias temp="cd $HOME/temp"
alias texclean='rm -rf *.aux *.fdb_latexmk *.fls *.log *.synctex.gz 2>/dev/null'

###############################################################################
# Builtin overrides
###############################################################################
[[ "$OSTYPE" == *"darwin"* ]] && \
  alias fancyls="ls -G" || \
  alias fancyls="ls --group-directories-first --color=auto"

# override cd to do ls and vi when necessary
_better_cd() {
  set -- ${1//,/.} # replace commas (,) with periods (.)
  if [[ -f $1 ]]; then
    local fdir=$(dirname $1)
    [[ -d $fdir ]] && builtin cd "$fdir" && fancyls && vim $(basename $1) ${*:2}
  else
    builtin cd "$@" && fancyls
  fi
}
alias cd=_better_cd

# tab completion in dotfiles directory
dotfiles() { cd $HOME/dotfiles/$1; }
compctl -f -W $HOME/dotfiles/ dotfiles

# override cat
_cat_ls() { [ -d $1 ] && fancyls $1 || command cat "$@"; }
alias cat=_cat_ls

###############################################################################
# Special Settings
###############################################################################
[[ -f "$HOME/.zshrc.os" ]] && source "$HOME/.zshrc.os"         # OS Specific
[[ -f "$HOME/.local_zshrc" ]] && source "$HOME/.local_zshrc"   # Local
[[ -f "$HOME/.secret_zshrc" ]] && source "$HOME/.secret_zshrc" # Secret!

###############################################################################
# Autostart TMUX
###############################################################################
if [[ -f "$HOME/.no_tmux" ]]; then
  builtin cd $(cat $HOME/.no_tmux)
  command rm -f $HOME/.no_tmux
elif [[ -z "$TMUX" ]]; then
  echo "Refusing to load Prezto. Opening tmux..."
  if [[ -f "$HOME/.tmux_new" ]]; then
    command rm -f $HOME/.tmux_new
    tmux new
  else
    tmux attach || tmux new
  fi
  if [[ $? -eq 0 ]]; then return; fi
fi

###############################################################################
# Prezto
###############################################################################
[[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]] && source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"

# realias cd
alias cd=_better_cd

###############################################################################
# z
###############################################################################
[ -f ~/dotfiles/z/z.sh ] && source ~/dotfiles/z/z.sh

###############################################################################
# vim fzf
###############################################################################
if [ -f ~/.fzf.zsh ]; then
  source ~/.fzf.zsh
  export FZF_COMPLETION_TRIGGER='jk'
  export FZF_DEFAULT_COMMAND='ag -g "" `git rev-parse --show-toplevel 2>/dev/null`'
  export FZF_CTRL_T_COMMAND='ag -g ""'
  export FZF_DEFAULT_OPTS='--ansi -m --bind=alt-k:up,alt-j:down'
fi

###############################################################################
# zsh scripts
###############################################################################
if [ -d ~/dotfiles/zsh/scripts ]; then
  for f in $(ls ~/dotfiles/zsh/scripts/*); do
    source $f
  done
fi

unsetopt CORRECT # disable autocorrect suggestions for commands
setopt NO_NOMATCH # pass bad match to command

if [[ "$PROFILE_STARTUP" == true ]]; then
  unsetopt xtrace
  exec 2>&3 3>&-
fi
