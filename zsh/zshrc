# vim: set ft=zsh:
###############################################################################
# Prezto
###############################################################################
# redraw prompt on async vcs_info update
function TRAPUSR1 {
  _async_vcs_info_pid=0
  _prompt_vcs_info=$(cat $HOME/._prompt_vcs_info)
  zle && zle reset-prompt
}

# run compinit -S on trusted computers
export TRUSTED_COMPINIT="HAL 9000"

# don't load prezto outside of tmux to speed up load
[[ -n "$TMUX" ]] && \
  [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]] && source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"

# make Escape in vicmd mode do nothing
unset BEEP
bindkey -M vicmd "\e" beep

###############################################################################
# Neovim Pane Switching
###############################################################################
# vim
if (( $+commands[nvim] )); then
  alias vim=nvim
  alias vi=nvim
else
  alias vi=vim
fi

# only defined in neovim libvterm
if [[ -n $NVIM_LISTEN_ADDRESS ]] && (( $+commands[nvim-bridge] )); then
  nvim-bridge &!
  nvim_bridge_send() { nc -U "${NVIM_LISTEN_ADDRESS}_bridge" <<< "$@" }
  exit_hook() { nvim_bridge_send 'builtin:close' }
  trap exit_hook EXIT

  _nvim_up()    { nvim_bridge_send 'command:TmuxNavigateUp' }
  _nvim_right() { nvim_bridge_send 'command:TmuxNavigateRight' }
  _nvim_down()  { nvim_bridge_send 'command:TmuxNavigateDown' }
  _nvim_left()  { nvim_bridge_send 'command:TmuxNavigateLeft' }
  zle -N nvim_up _nvim_up
  zle -N nvim_right _nvim_right
  zle -N nvim_down _nvim_down
  zle -N nvim_left _nvim_left
  bindkey '^K' nvim_up
  bindkey '^L' nvim_right
  bindkey '^J' nvim_down
  bindkey '^H' nvim_left

  _nvim_quit_pane() { nvim_bridge_send "builtin:q" }
  alias ':q'=_nvim_quit_pane

  _nvim_client() { nvim_bridge_send "builtin:edit:$(pwd):$@" }
  alias nvim=_nvim_client
  alias vim=_nvim_client
  alias vi=_nvim_client
  export EDITOR=_nvim_client

elif [[ -n $TMUX ]]; then
  alias ':q'='tmux kill-pane'
fi

###############################################################################
# Aliases & Functions
###############################################################################
# basics
alias restart="exec $SHELL"
alias c=clear
clr() {
  clear
  [ -n $TMUX ] && tmux clear-history
}
stripansi() {
  [[ $UNAME == darwin ]] && \
    sed -E "s/"$'\E'"\[([0-9]{1,2}(;[0-9]{1,2})*)?m//g" ||
    sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})*)?m//g"
}

alias unixtime='date +%s'

alias vimrc='vi ~/.vimrc'
alias vis='vi -u ~/.vim/vimrc_small'
alias vimrc_small='vis ~/.vim/vimrc_small'

vim-profile() {
  $DOTFILES/vim-profiler/vim-profiler.py ${@:1:$((${#@} - 1))} $(which nvim) ${@: -1}
}

swpclean() {
  find . -name '*.sw*' -exec /bin/rm -rf {} \;
}

vimreplace() {
  [[ $# < 2 ]] && echo 'Not enough arguments' && return

  local search
  (( $+commands[ag] )) && \
    search="ag -l --nocolor $1" || \
    search="grep -rl $1 *"

  local -a matches
  while read line; do
    matches+=$line
  done < <(eval $search)
  vim -c "bufdo %s/$1/$2/gec | update" ${matches}
}

# Facebook Path Picker
alias pp=fpp

# zsh
alias zshso='source ~/.zshrc'
alias zshenv='vi ~/.zshenv'
alias zshrc='vi ~/.zshrc'
alias zprofile='vi ~/.zprofile'
alias zpreztorc='vi ~/.zpreztorc'
alias zlogin='vi ~/.zlogin'

# tmux
alias t='tmux'
alias tl='tmux ls'
alias detach='tmux detach'
alias tmuxconf="vi ~/.tmux.conf"
alias tconf='tmuxconf'
alias tname='tmux rename-session'

tkill() {
  case $1 in
    (-1)
      command tmux kill-session;;
    (-a|--all)
      command tmux kill-session -a;;
    (*)
      command tmux kill-session -a
      command tmux kill-session;;
  esac
}

# julia
alias jl=julia

# python
alias ipy=ipython
alias py=python
alias py3=python3
venv() {
  source $1/bin/activate
}
rpdb() {
  socat readline tcp:${2:-0.0.0.0}:${1:-4444}
}

if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
  workon() { unset -f workon && source /usr/local/bin/virtualenvwrapper.sh && workon "$@"; }
  [[ -n ${VIRTUAL_ENV} ]] && workon ${VIRTUAL_ENV:t} # autostart virtualenv
fi

# if (( $+commands[pylama] )); then
#   pylama() { # pylama should use pylama.ini at root of git repo
#     local gitroot=$(git rev-parse --show-toplevel 2>/dev/null)
#     [[ $? -ne 0 || $* == *"-o"* || $* == *"--options"* ]] && \
#       pylama $* || \
#       pylama --options "${gitroot}/pylama.ini" "$@"
#   }
# fi

# modified from http://unix.stackexchange.com/questions/13464
upsearch() {
  local curdir="$PWD"
  while 1; do
    [ -f "$curdir/$1" ] && echo "$curdir/$1" && return
    [[ "$curdir" == "/" ]] && return
    curdir=$(dirname "$curdir")
  done
}
dmake() { # django
  local django=$(upsearch manage.py)
  [[ -n $django ]] && \
    (cd $(dirname $django) && python $django "$@") || \
    echo "Couldn't find manage.py"
}

# ruby
if (( $+commands[rbenv] )); then
  rbenv() { unset -f rbenv && eval "$(rbenv init - | tail -n +2)" && rbenv "$@"; }
fi

# nvm
# TODO(aleks, 03/15/16): the following line is too slow because of brew, but it's also more
# general. should fix later
# if [[ (( $+commands[brew] )) && -s $(brew --prefix nvm)/nvm.sh ]]; then
if (( $+commands[brew] )) && [[ -s usr/local/opt/nvm.sh ]]; then
  _node_shim() {
    unset -f node
    unset -f npm
    unset -f nvm
    unset -f _node_shim
    source $(brew --prefix nvm)/nvm.sh
  }
  node() { _node_shim && node "$@"; }
  npm() { _node_shim && npm "$@"; }
  nvm() { _node_shim && nvm "$@"; }
fi

# git
(( $+commands[hub] )) && alias git=hub
alias g='git'

# context from root of git directory
gr() {
  local root=$(command git rev-parse --show-toplevel 2> /dev/null)
  [[ $? == 0 ]] && cd $root || cd "$@"
}

if (( $+commands[tag] )); then
  ag() { command tag "$@"; source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null }
  tag() { command tag "$@"; source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null }
fi

# other
alias temp="cd $HOME/temp"
alias texclean='rm -rf *.aux *.fdb_latexmk *.fls *.log *.synctex.gz 2>/dev/null'

###############################################################################
# Builtin overrides
###############################################################################
[[ "$OSTYPE" == *"darwin"* ]] && \
  alias fancyls="ls -G" || \
  alias fancyls="ls --group-directories-first --color=auto"

# override cd to do ls and vi when necessary
_better_cd() {
  set -- ${1//,/.} # replace commas (,) with periods (.) [looking at u Golang]
  if [[ -f $1 ]]; then
    local fdir=$(dirname $1)
    [[ -d $fdir ]] && builtin cd $fdir && fancyls && vim $(basename $1) ${*:2}
  else
    builtin cd "$@" && fancyls
  fi
}
alias cd=_better_cd

# tab completion in dotfiles directory
dotfiles() { cd $DOTFILES/$1; }
compctl -f -W $DOTFILES/ dotfiles

# override cat
_cat_ls() { [ -d $1 ] && fancyls $1 || command cat "$@"; }
alias cat=_cat_ls

###############################################################################
# Special Settings
###############################################################################
[[ -f "$HOME/.zshrc.os" ]] && source "$HOME/.zshrc.os"         # OS Specific
[[ -f "$HOME/.local_zshrc" ]] && source "$HOME/.local_zshrc"   # Local
[[ -f "$HOME/.secret_zshrc" ]] && source "$HOME/.secret_zshrc" # Secret!

###############################################################################
# z
###############################################################################
[ -f $DOTFILES/z/z.sh ] && source $DOTFILES/z/z.sh

###############################################################################
# vim fzf
###############################################################################
if [ -f ~/.fzf.zsh ]; then
  source ~/.fzf.zsh
  export FZF_COMPLETION_TRIGGER='jk'
  export FZF_DEFAULT_COMMAND='ag --nocolor --hidden --ignore-dir=.git -g "" `git rev-parse --show-toplevel 2>/dev/null`'
  export FZF_CTRL_T_COMMAND='ag --nocolor --hidden --ignore-dir=.git -g ""'
  export FZF_DEFAULT_OPTS='--ansi -m --bind=alt-k:up,alt-j:down'
fi

###############################################################################
# zsh scripts
###############################################################################
if [ -d $DOTFILES/zsh/scripts ]; then
  for f in $DOTFILES/zsh/scripts/*; do
    source $f
  done
fi

unsetopt CORRECT         # disable autocorrect suggestions for commands
unsetopt AUTO_NAME_DIRS  # don't resolve environment variables in prompt
setopt NO_NOMATCH        # pass bad match to command

if [[ -o INTERACTIVE && ! -o LOGIN ]]; then
  _startup_time_prompt '\x1b[35m'  # purple
fi
