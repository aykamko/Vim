# vim
#------------------------------------------------------------------------------
if type nvim > /dev/null 2>&1; then
  alias vi=nvim
  alias vim=nvim
else
  alias vi=vim
fi
alias vimrc="vi ~/.vimrc"
function swpclean() {
  find . -name "*.sw*" -exec /bin/rm -rf {} \;
}
function vimreplace() {
  if [[ $# < 2 ]]; then
    echo 'Not enough arguments'
    return
  fi

  local search
  if test ag &> /dev/null; then
    search="ag -l --nocolor $1"
  else
    search="grep -rl $1 *"
  fi

  local -a matches
  while read line; do
    matches+=$line
  done < <(eval $search)
  echo $matches
  vim -c "bufdo %s/$1/$2/gec | update" ${matches}
}

###############################################################################
# Aliases & Functions
###############################################################################
# basics
#------------------------------------------------------------------------------
alias c="clear"

# Facebook Path Picker
#------------------------------------------------------------------------------
alias pp="fpp"

# zsh
#------------------------------------------------------------------------------
alias zshso="source ~/.zshrc"
alias zshrc="vi ~/.zshrc"
alias zprofile="vi ~/.zprofile"
alias zpreztorc="vi ~/.zpreztorc"

# tmux
#------------------------------------------------------------------------------
function tmux() {

  # if given more than one argument, run tmux program with args normally
  if [[ $# -gt 0 ]]; then
    command tmux ${*:1}
    return
  fi

  local sessions
  sessions=`command tmux ls 2>/dev/null`
  if [[ -z $sessions ]]; then
    # if no tmux sessions open, start a new one
    command tmux
  else
    # else, do useful things
    local num_sess
    num_sess=`echo $sessions | wc -l`
    if [[ -z $TMUX ]]; then # not in tmux already
      if [[ $num_sess -gt 1 ]]; then
        command tmux a \; choose-session
      else
        # sessions == 1
        command tmux a
      fi
    elif [[ $num_sess -gt 1 ]]; then # already in tmux, sessions > 1
      command tmux choose-session
    else
      # already in tmux, sessions == 1
      echo 'Only running tmux session.\nExit tmux and use tnew to create a new one.'
    fi
  fi
}

# tmux attach
function ta() {
  if [[ -z $TMUX ]]; then
    tmux attach -t $*
  else
    tmux switch -t $*
  fi
}

function tkill() {
  declare option
  option="$1"
  if [ "$#" -gt 0 ]; then shift; fi

  case "$option" in
    (-1)
      command tmux kill-session;
      ;;
    (-a|--all)
      command tmux kill-session -a;
      ;;
    (*)
      command tmux kill-session -a;
      command tmux kill-session;
      ;;
  esac
}

alias tl='tmux ls'
alias detach='tmux detach'
alias tmuxconf="vi ~/.tmux.conf"
alias tconf='tmuxconf'
alias tname='tmux rename-session'

function tpp() {
  [[ -z $TMUX ]] && echo 'Not in tmux!' && return
  command tmux capture-pane -pe | fpp
}

# julia
#------------------------------------------------------------------------------
alias jl=julia

# python
#------------------------------------------------------------------------------
alias ipy="ipython"
alias py="python"
alias py3="python3"
alias venvwrapper="source /usr/local/bin/virtualenvwrapper.sh"
function venv() {
  if [[ -n $VIRTUAL_ENV ]]; then
    workon $*
  else
    venvwrapper
    workon $*
  fi
}
type mkvirtualenv > /dev/null; if [[ -n $VIRTUAL_ENV && $? -ne 0 ]]; then
  venvwrapper
  workon ${VIRTUAL_ENV:t}
fi
# alias pylama to use pylama.ini at root of repo
if test pylama >/dev/null; then
  function _pylama() {
    local gr
    gr=$(git rev-parse --show-toplevel 2>/dev/null)
    if [[ $? -ne 0 || $* == *"-o"* || $* == *"--options"* ]]; then
      pylama $*
    else
      pylama --options "${gr}/pylama.ini" $*
    fi
  }
  alias pylama=_pylama
fi

# modified from http://unix.stackexchange.com/questions/13464
function _upsearch() {
  local curdir
  curdir="$PWD"
  while : ; do
    test -e "$curdir/$1" && echo "$curdir/$1" && return
    [[ "$curdir" == "/" ]] && return
    curdir=`dirname "$curdir"`
  done
}
alias upsearch=_upsearch

function _dmake() { # django
  local django
  django=`upsearch manage.py`
  if [[ -z "$django" ]]; then
    echo "Couldn't find manage.py" && return
  else
    python "$django" $*
  fi
}
alias dmake=_dmake # django

# ruby
#------------------------------------------------------------------------------
if type rbenv > /dev/null; then
  eval "$(rbenv init -)";
fi

# node
#------------------------------------------------------------------------------
if which nvm > /dev/null; then
  export NVM_DIR=~/.nvm
  source $(brew --prefix nvm)/nvm.sh
fi

# git
#------------------------------------------------------------------------------
if type hub > /dev/null; then
  alias git=hub
fi
alias g='git'

# context from root of git directory
function groot() {
  local root
  root=$(command git rev-parse --show-toplevel 2> /dev/null)
  if [[ $? != 0 ]]; then
    cd $*
    return
  fi
  if [[ $# == 0 ]]; then
    cd $root
  else
    (builtin cd $root && $*)
  fi
}
alias gr=groot

# other
#------------------------------------------------------------------------------
# go to temp dir
alias temp="cd $HOME/temp"

# clean latexmk aux files
alias texclean="rm -rf *.aux *.fdb_latexmk *.fls *.log *.synctex.gz 2>/dev/null"

###############################################################################
# Builtin overrides
###############################################################################
# override cd to do ls and vi when necessary
if [ $(uname) = "Darwin" ]; then
  alias fancyls="ls -G"
else
  alias fancyls="ls --group-directories-first --color=auto"
fi
function _better_cd() {
  set -- ${1//,/.} # replace commas (,) with periods (.)
  if [[ -f $1 ]]; then
    local fdir
    fdir=`dirname $1`
    if [[ -d $fdir ]]; then
      builtin cd "$fdir"
      fancyls
    fi
    vim `basename $1` ${*:2}
  else
    builtin cd $*
    fancyls
  fi
}
alias cd=_better_cd

# tab completion in dotfiles directory
dotfiles() { cd $HOME/dotfiles/$1; }
compctl -f -W $HOME/dotfiles/ dotfiles

# override cat
function _cat_ls() {
  if [ -d $1 ]; then
    fancyls $1
  else
    command cat $*
  fi
}
alias cat=_cat_ls

###############################################################################
# Special Settings
###############################################################################
# OS Specific
if [[ -f "$HOME/.zshrc.os" ]]; then
  source "$HOME/.zshrc.os";
fi

# Local
if [[ -f "$HOME/.local_zshrc" ]]; then
  source "$HOME/.local_zshrc";
fi

# Secret!
if [[ -f "$HOME/.secret_zshrc" ]]; then
  source "$HOME/.secret_zshrc";
fi

###############################################################################
# Autostart TMUX
###############################################################################
if [[ -f "$HOME/.no_tmux" ]]; then
  builtin cd $(cat $HOME/.no_tmux)
  command rm -f $HOME/.no_tmux
elif [[ -z "$TMUX" ]]; then
  echo "Refusing to load Prezto. Opening tmux..."
  if [[ -f "$HOME/.tmux_new" ]]; then
    command rm -f $HOME/.tmux_new
    tmux new;
  else
    tmux attach || tmux
  fi
  return
fi

###############################################################################
# Prezto
###############################################################################
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# realias cd
alias cd=_better_cd

###############################################################################
# z
###############################################################################
if [ -f ~/dotfiles/z/z.sh ]; then
  source ~/dotfiles/z/z.sh
fi

###############################################################################
# vim fzf
###############################################################################
if [ -f ~/.fzf.zsh ]; then
  source ~/.fzf.zsh
  export FZF_COMPLETION_TRIGGER='jk'
  export FZF_DEFAULT_COMMAND='ag -g "" `git rev-parse --show-toplevel 2>/dev/null`'
  export FZF_CTRL_T_COMMAND='ag -g ""'
  export FZF_DEFAULT_OPTS='--ansi -m --bind=alt-k:up,alt-j:down'
fi

###############################################################################
# zsh scripts
###############################################################################
if [ -d ~/dotfiles/zsh/scripts ]; then
  for f in $(ls ~/dotfiles/zsh/scripts/*); do
    source $f
  done
fi

unsetopt CORRECT # disable autocorrect suggestions for commands
setopt NO_NOMATCH # pass bad match to command
