# vim: set ft=zsh:
#
# A cool theme, yo.
#
# Authors:
#   Aleks Kamko <aykamko@gmail.com>
#

_c1='cyan'
_c2='blue'
_c3='magenta'
_c4='red'
_c5='yellow'
_hide='240'
_attn='14'

# get the commit difference counts between local and remote.
function vi+git_ahead_behind {
  local prompt_info ahead_and_behind ahead behind
  ahead_and_behind="$(git rev-list --count --left-right HEAD...@\{upstream\} 2> /dev/null)"
  ahead="$ahead_and_behind[(w)1]"
  behind="$ahead_and_behind[(w)2]"

  prompt_info=""
  if (( ahead > 0 )); then
    prompt_info+="%F{$_c5}+$ahead%f"
  fi
  if (( behind > 0 )); then
    (( ahead > 0 )) && prompt_info+="%F{$_c2},%f"
    prompt_info+="%F{$_c5}-$behind%f"
  fi
  [[ -n $prompt_info ]] && hook_com[misc]="%F{$_c2}{%f$prompt_info%F{$_c2}}%f"
  return 0
}

# prepend space to vcs_info diff info
function +vi-git_fmt_diff {
  if [[ -n ${hook_com[staged]} ]]; then
    hook_com[staged]=" ${hook_com[staged]}"
  elif [[ -n ${hook_com[unstaged]} ]]; then
    hook_com[unstaged]=" ${hook_com[unstaged]}"
  fi
  return 0
}

# set xterm pane title
function xterm_title {
  echo -ne "\033]2;$(egrep -o '[^/]*(\/[^/]*(\/[^/]*)?)?$' <<< "${PWD/#$HOME/~}")\033\\"
}

# show marker if python virtualenv is active
export VIRTUAL_ENV_DISABLE_PROMPT=1
function virtualenv_info {
  if [[ -n $VIRTUAL_ENV ]]; then
    _venv="%F{$_c2}[%füêç %F{white}${VIRTUAL_ENV:t}%f%F{$_c2}]%f"
  else
    unset _venv
  fi
}

# show marker if docker machine is mounted in env
function docker_mounted {
  if [[ -n $DOCKER_MACHINE_NAME ]]; then
    local machine_name
    [[ $DOCKER_MACHINE_NAME = "default" ]] && \
      unset machine_name || machine_name=$DOCKER_MACHINE_NAME
    _docker="%F{$_c2}[%füê≥ %F{white}${machine_name}%f%F{$_c2}]%f"
  else
    unset _docker
  fi
}

function async_prompt {
  xterm_title
  virtualenv_info
  docker_mounted
  vcs_info

  local info="${_docker}${_venv}${vcs_info_msg_0_}"
  [ -n "$info" ] && info=" $info"
  echo -n $info >! $HOME/._async_prompt

  kill -s USR1 $$
}

function prompt_ayk_precmd {
  if (( _async_prompt_pid != 0 )); then
    kill -s HUP _async_prompt_pid &>/dev/null || :
  fi

  async_prompt &!
  _async_prompt_pid=$!
}

function prompt_ayk_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  # Add hook for calling vcs_info before each command.
  #
  add-zsh-hook precmd prompt_ayk_precmd

  # If terminal is interactive non-login (AKA neovim's libvterm), change prompt emoji
  [[ -o INTERACTIVE && ! -o LOGIN ]] && prompt_emoji="üëæ " || prompt_emoji="üêº "

  # If terminal not in tmux, prepend message
  [[ -z $TMUX ]] && prompt_tmux="%F{$_c3}[--tmux]%f " || prompt_tmux=""

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format "%B%F{$_c4}...%f%b"
  zstyle ':prezto:module:editor:info:keymap:primary' format "$prompt_emoji"
  zstyle ':prezto:module:editor:info:keymap:alternate' format "üê∑ %F{$_attn}"
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format "%B%F{$_c4}!%f%b"

  # Set vcs_info parameters.
  zstyle ':vcs_info:*' enable git hg svn
  zstyle ':vcs_info:*' check-for-changes true
  zstyle ':vcs_info:*' stagedstr "%F{green}‚óè%f"
  zstyle ':vcs_info:*' unstagedstr "%F{yellow}‚óè%f"
  zstyle ':vcs_info:*' formats "%F{$_c2}(%f%F{$_c4}%b%f%c%u%F{$_c2})%f%m"
  zstyle ':vcs_info:*' actionformats "%F{$_c2}(%f%F{$_c4}%b%f%c%u|%F{cyan}%a%f%F{$_c2})%f%m"
  zstyle ':vcs_info:svn:*' branchformat "%b|%F{cyan}%r%f"
  zstyle ':vcs_info:git*+set-message:*' hooks git_ahead_behind git_fmt_diff

  # Define prompts.
  PROMPT='${prompt_tmux}%F{$_c1}%3~%f${_async_prompt} ${editor_info[keymap]}${editor_info[overwrite]} '
  RPROMPT='%f%(?::%F{$_c5}$?%f)'
}

prompt_ayk_setup "$@"
